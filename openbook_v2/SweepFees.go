// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Sweep fees, as a [`Market`](crate::state::Market)'s admin.
type SweepFees struct {

	// [0] = [SIGNER] collectFeeAdmin
	//
	// [1] = [WRITE] market
	//
	// [2] = [] marketAuthority
	//
	// [3] = [WRITE] marketQuoteVault
	//
	// [4] = [WRITE] tokenReceiverAccount
	//
	// [5] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSweepFeesInstructionBuilder creates a new `SweepFees` instruction builder.
func NewSweepFeesInstructionBuilder() *SweepFees {
	nd := &SweepFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetCollectFeeAdminAccount sets the "collectFeeAdmin" account.
func (inst *SweepFees) SetCollectFeeAdminAccount(collectFeeAdmin ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(collectFeeAdmin).SIGNER()
	return inst
}

// GetCollectFeeAdminAccount gets the "collectFeeAdmin" account.
func (inst *SweepFees) GetCollectFeeAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarketAccount sets the "market" account.
func (inst *SweepFees) SetMarketAccount(market ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *SweepFees) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAuthorityAccount sets the "marketAuthority" account.
func (inst *SweepFees) SetMarketAuthorityAccount(marketAuthority ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(marketAuthority)
	return inst
}

// GetMarketAuthorityAccount gets the "marketAuthority" account.
func (inst *SweepFees) GetMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarketQuoteVaultAccount sets the "marketQuoteVault" account.
func (inst *SweepFees) SetMarketQuoteVaultAccount(marketQuoteVault ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(marketQuoteVault).WRITE()
	return inst
}

// GetMarketQuoteVaultAccount gets the "marketQuoteVault" account.
func (inst *SweepFees) GetMarketQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTokenReceiverAccountAccount sets the "tokenReceiverAccount" account.
func (inst *SweepFees) SetTokenReceiverAccountAccount(tokenReceiverAccount ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(tokenReceiverAccount).WRITE()
	return inst
}

// GetTokenReceiverAccountAccount gets the "tokenReceiverAccount" account.
func (inst *SweepFees) GetTokenReceiverAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *SweepFees) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *SweepFees) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst SweepFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SweepFees,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SweepFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SweepFees) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.CollectFeeAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MarketAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MarketQuoteVault is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TokenReceiverAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *SweepFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SweepFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" collectFeeAdmin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          market", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta(" marketAuthority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("marketQuoteVault", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   tokenReceiver", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj SweepFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SweepFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSweepFeesInstruction declares a new SweepFees instruction with the provided parameters and accounts.
func NewSweepFeesInstruction(
	// Accounts:
	collectFeeAdmin ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	marketAuthority ag_solanago.PublicKey,
	marketQuoteVault ag_solanago.PublicKey,
	tokenReceiverAccount ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *SweepFees {
	return NewSweepFeesInstructionBuilder().
		SetCollectFeeAdminAccount(collectFeeAdmin).
		SetMarketAccount(market).
		SetMarketAuthorityAccount(marketAuthority).
		SetMarketQuoteVaultAccount(marketQuoteVault).
		SetTokenReceiverAccountAccount(tokenReceiverAccount).
		SetTokenProgramAccount(tokenProgram)
}
