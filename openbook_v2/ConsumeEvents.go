// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Process up to `limit` [events](crate::state::AnyEvent).
//
// When a user places a 'take' order, they do not know beforehand which
// market maker will have placed the 'make' order that they get executed
// against. This prevents them from passing in a market maker's
// [`OpenOrdersAccount`](crate::state::OpenOrdersAccount), which is needed
// to credit/debit the relevant tokens to/from the maker. As such, Openbook
// uses a 'crank' system, where `place_order` only emits events, and
// `consume_events` handles token settlement.
//
// Currently, there are two types of events: [`FillEvent`](crate::state::FillEvent)s
// and [`OutEvent`](crate::state::OutEvent)s.
//
// A `FillEvent` is emitted when an order is filled, and it is handled by
// debiting whatever the taker is selling from the taker and crediting
// it to the maker, and debiting whatever the taker is buying from the
// maker and crediting it to the taker. Note that *no tokens are moved*,
// these are just debits and credits to each party's [`Position`](crate::state::Position).
//
// An `OutEvent` is emitted when a limit order needs to be removed from
// the book during a `place_order` invocation, and it is handled by
// crediting whatever the maker would have sold (quote token in a bid,
// base token in an ask) back to the maker.
type ConsumeEvents struct {
	Limit *uint64

	// [0] = [SIGNER] consumeEventsAdmin
	//
	// [1] = [WRITE] market
	//
	// [2] = [WRITE] eventHeap
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewConsumeEventsInstructionBuilder creates a new `ConsumeEvents` instruction builder.
func NewConsumeEventsInstructionBuilder() *ConsumeEvents {
	nd := &ConsumeEvents{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetLimit sets the "limit" parameter.
func (inst *ConsumeEvents) SetLimit(limit uint64) *ConsumeEvents {
	inst.Limit = &limit
	return inst
}

// SetConsumeEventsAdminAccount sets the "consumeEventsAdmin" account.
func (inst *ConsumeEvents) SetConsumeEventsAdminAccount(consumeEventsAdmin ag_solanago.PublicKey) *ConsumeEvents {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(consumeEventsAdmin).SIGNER()
	return inst
}

// GetConsumeEventsAdminAccount gets the "consumeEventsAdmin" account.
func (inst *ConsumeEvents) GetConsumeEventsAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMarketAccount sets the "market" account.
func (inst *ConsumeEvents) SetMarketAccount(market ag_solanago.PublicKey) *ConsumeEvents {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *ConsumeEvents) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventHeapAccount sets the "eventHeap" account.
func (inst *ConsumeEvents) SetEventHeapAccount(eventHeap ag_solanago.PublicKey) *ConsumeEvents {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventHeap).WRITE()
	return inst
}

// GetEventHeapAccount gets the "eventHeap" account.
func (inst *ConsumeEvents) GetEventHeapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst ConsumeEvents) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ConsumeEvents,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConsumeEvents) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConsumeEvents) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Limit == nil {
			return errors.New("Limit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.ConsumeEventsAdmin is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventHeap is not set")
		}
	}
	return nil
}

func (inst *ConsumeEvents) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConsumeEvents")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Limit", *inst.Limit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("consumeEventsAdmin", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            market", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         eventHeap", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ConsumeEvents) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConsumeEvents) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

// NewConsumeEventsInstruction declares a new ConsumeEvents instruction with the provided parameters and accounts.
func NewConsumeEventsInstruction(
	// Parameters:
	limit uint64,
	// Accounts:
	consumeEventsAdmin ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	eventHeap ag_solanago.PublicKey) *ConsumeEvents {
	return NewConsumeEventsInstructionBuilder().
		SetLimit(limit).
		SetConsumeEventsAdminAccount(consumeEventsAdmin).
		SetMarketAccount(market).
		SetEventHeapAccount(eventHeap)
}
