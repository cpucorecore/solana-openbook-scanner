// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Deposit a certain amount of `base` and `quote` lamports into one's
// [`Position`](crate::state::Position).
//
// Makers might wish to `deposit`, rather than have actual tokens moved for
// each trade, in order to reduce CUs.
type Deposit struct {
	BaseAmount  *uint64
	QuoteAmount *uint64

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] userBaseAccount
	//
	// [2] = [WRITE] userQuoteAccount
	//
	// [3] = [WRITE] openOrdersAccount
	//
	// [4] = [WRITE] market
	//
	// [5] = [WRITE] marketBaseVault
	//
	// [6] = [WRITE] marketQuoteVault
	//
	// [7] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDepositInstructionBuilder creates a new `Deposit` instruction builder.
func NewDepositInstructionBuilder() *Deposit {
	nd := &Deposit{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 8),
	}
	return nd
}

// SetBaseAmount sets the "baseAmount" parameter.
func (inst *Deposit) SetBaseAmount(baseAmount uint64) *Deposit {
	inst.BaseAmount = &baseAmount
	return inst
}

// SetQuoteAmount sets the "quoteAmount" parameter.
func (inst *Deposit) SetQuoteAmount(quoteAmount uint64) *Deposit {
	inst.QuoteAmount = &quoteAmount
	return inst
}

// SetOwnerAccount sets the "owner" account.
func (inst *Deposit) SetOwnerAccount(owner ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *Deposit) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetUserBaseAccountAccount sets the "userBaseAccount" account.
func (inst *Deposit) SetUserBaseAccountAccount(userBaseAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(userBaseAccount).WRITE()
	return inst
}

// GetUserBaseAccountAccount gets the "userBaseAccount" account.
func (inst *Deposit) GetUserBaseAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserQuoteAccountAccount sets the "userQuoteAccount" account.
func (inst *Deposit) SetUserQuoteAccountAccount(userQuoteAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(userQuoteAccount).WRITE()
	return inst
}

// GetUserQuoteAccountAccount gets the "userQuoteAccount" account.
func (inst *Deposit) GetUserQuoteAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *Deposit) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *Deposit) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMarketAccount sets the "market" account.
func (inst *Deposit) SetMarketAccount(market ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *Deposit) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketBaseVaultAccount sets the "marketBaseVault" account.
func (inst *Deposit) SetMarketBaseVaultAccount(marketBaseVault ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(marketBaseVault).WRITE()
	return inst
}

// GetMarketBaseVaultAccount gets the "marketBaseVault" account.
func (inst *Deposit) GetMarketBaseVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMarketQuoteVaultAccount sets the "marketQuoteVault" account.
func (inst *Deposit) SetMarketQuoteVaultAccount(marketQuoteVault ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(marketQuoteVault).WRITE()
	return inst
}

// GetMarketQuoteVaultAccount gets the "marketQuoteVault" account.
func (inst *Deposit) GetMarketQuoteVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Deposit) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Deposit {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Deposit) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

func (inst Deposit) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Deposit,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Deposit) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Deposit) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.BaseAmount == nil {
			return errors.New("BaseAmount parameter is not set")
		}
		if inst.QuoteAmount == nil {
			return errors.New("QuoteAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.UserBaseAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.UserQuoteAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.MarketBaseVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MarketQuoteVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Deposit) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Deposit")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" BaseAmount", *inst.BaseAmount))
						paramsBranch.Child(ag_format.Param("QuoteAmount", *inst.QuoteAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=8]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        userBase", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       userQuote", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      openOrders", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          market", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta(" marketBaseVault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("marketQuoteVault", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(7)))
					})
				})
		})
}

func (obj Deposit) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BaseAmount` param:
	err = encoder.Encode(obj.BaseAmount)
	if err != nil {
		return err
	}
	// Serialize `QuoteAmount` param:
	err = encoder.Encode(obj.QuoteAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Deposit) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BaseAmount`:
	err = decoder.Decode(&obj.BaseAmount)
	if err != nil {
		return err
	}
	// Deserialize `QuoteAmount`:
	err = decoder.Decode(&obj.QuoteAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewDepositInstruction declares a new Deposit instruction with the provided parameters and accounts.
func NewDepositInstruction(
	// Parameters:
	baseAmount uint64,
	quoteAmount uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	userBaseAccount ag_solanago.PublicKey,
	userQuoteAccount ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	marketBaseVault ag_solanago.PublicKey,
	marketQuoteVault ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Deposit {
	return NewDepositInstructionBuilder().
		SetBaseAmount(baseAmount).
		SetQuoteAmount(quoteAmount).
		SetOwnerAccount(owner).
		SetUserBaseAccountAccount(userBaseAccount).
		SetUserQuoteAccountAccount(userQuoteAccount).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetMarketAccount(market).
		SetMarketBaseVaultAccount(marketBaseVault).
		SetMarketQuoteVaultAccount(marketQuoteVault).
		SetTokenProgramAccount(tokenProgram)
}
