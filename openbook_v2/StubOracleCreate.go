// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// StubOracleCreate is the `stubOracleCreate` instruction.
type StubOracleCreate struct {
	Price *int64

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [WRITE] oracle
	//
	// [3] = [] mint
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewStubOracleCreateInstructionBuilder creates a new `StubOracleCreate` instruction builder.
func NewStubOracleCreateInstructionBuilder() *StubOracleCreate {
	nd := &StubOracleCreate{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetPrice sets the "price" parameter.
func (inst *StubOracleCreate) SetPrice(price int64) *StubOracleCreate {
	inst.Price = &price
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *StubOracleCreate) SetPayerAccount(payer ag_solanago.PublicKey) *StubOracleCreate {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *StubOracleCreate) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *StubOracleCreate) SetOwnerAccount(owner ag_solanago.PublicKey) *StubOracleCreate {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *StubOracleCreate) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOracleAccount sets the "oracle" account.
func (inst *StubOracleCreate) SetOracleAccount(oracle ag_solanago.PublicKey) *StubOracleCreate {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(oracle).WRITE()
	return inst
}

// GetOracleAccount gets the "oracle" account.
func (inst *StubOracleCreate) GetOracleAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *StubOracleCreate) SetMintAccount(mint ag_solanago.PublicKey) *StubOracleCreate {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *StubOracleCreate) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *StubOracleCreate) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *StubOracleCreate {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *StubOracleCreate) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst StubOracleCreate) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_StubOracleCreate,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst StubOracleCreate) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *StubOracleCreate) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Price == nil {
			return errors.New("Price parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Oracle is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *StubOracleCreate) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("StubOracleCreate")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Price", *inst.Price))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       oracle", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj StubOracleCreate) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	return nil
}
func (obj *StubOracleCreate) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	return nil
}

// NewStubOracleCreateInstruction declares a new StubOracleCreate instruction with the provided parameters and accounts.
func NewStubOracleCreateInstruction(
	// Parameters:
	price int64,
	// Accounts:
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	oracle ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *StubOracleCreate {
	return NewStubOracleCreateInstructionBuilder().
		SetPrice(price).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetOracleAccount(oracle).
		SetMintAccount(mint).
		SetSystemProgramAccount(systemProgram)
}
