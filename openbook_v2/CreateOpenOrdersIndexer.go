// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create an [`OpenOrdersIndexer`](crate::state::OpenOrdersIndexer) account.
type CreateOpenOrdersIndexer struct {

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [WRITE] openOrdersIndexer
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOpenOrdersIndexerInstructionBuilder creates a new `CreateOpenOrdersIndexer` instruction builder.
func NewCreateOpenOrdersIndexerInstructionBuilder() *CreateOpenOrdersIndexer {
	nd := &CreateOpenOrdersIndexer{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateOpenOrdersIndexer) SetPayerAccount(payer ag_solanago.PublicKey) *CreateOpenOrdersIndexer {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateOpenOrdersIndexer) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CreateOpenOrdersIndexer) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateOpenOrdersIndexer {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CreateOpenOrdersIndexer) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenOrdersIndexerAccount sets the "openOrdersIndexer" account.
func (inst *CreateOpenOrdersIndexer) SetOpenOrdersIndexerAccount(openOrdersIndexer ag_solanago.PublicKey) *CreateOpenOrdersIndexer {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openOrdersIndexer).WRITE()
	return inst
}

// GetOpenOrdersIndexerAccount gets the "openOrdersIndexer" account.
func (inst *CreateOpenOrdersIndexer) GetOpenOrdersIndexerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateOpenOrdersIndexer) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOpenOrdersIndexer {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateOpenOrdersIndexer) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CreateOpenOrdersIndexer) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOpenOrdersIndexer,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOpenOrdersIndexer) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOpenOrdersIndexer) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenOrdersIndexer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateOpenOrdersIndexer) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOpenOrdersIndexer")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("openOrdersIndexer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateOpenOrdersIndexer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CreateOpenOrdersIndexer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCreateOpenOrdersIndexerInstruction declares a new CreateOpenOrdersIndexer instruction with the provided parameters and accounts.
func NewCreateOpenOrdersIndexerInstruction(
	// Accounts:
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	openOrdersIndexer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateOpenOrdersIndexer {
	return NewCreateOpenOrdersIndexerInstructionBuilder().
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetOpenOrdersIndexerAccount(openOrdersIndexer).
		SetSystemProgramAccount(systemProgram)
}
