// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MarketSB struct {
	// PDA bump
	Bump uint8

	// Number of decimals used for the base token.
	//
	// Used to convert the oracle's price into a native/native price.
	BaseDecimals    uint8
	QuoteDecimals   uint8
	Padding1        [5]uint8
	MarketAuthority ag_solanago.PublicKey

	// No expiry = 0. Market will expire and no trading allowed after time_expiry
	TimeExpiry int64

	// Admin who can collect fees from the market
	CollectFeeAdmin ag_solanago.PublicKey

	// Admin who must sign off on all order creations
	OpenOrdersAdmin NonZeroPubkeyOption

	// Admin who must sign off on all event consumptions
	ConsumeEventsAdmin NonZeroPubkeyOption

	// Admin who can set market expired, prune orders and close the market
	CloseMarketAdmin NonZeroPubkeyOption

	// Name. Trailing zero bytes are ignored.
	Name [16]uint8

	// Address of the BookSide account for bids
	Bids ag_solanago.PublicKey

	// Address of the BookSide account for asks
	Asks ag_solanago.PublicKey

	// Address of the EventHeap account
	EventHeap ag_solanago.PublicKey

	// Oracles account address
	OracleA NonZeroPubkeyOption
	OracleB NonZeroPubkeyOption

	// Oracle configuration
	OracleConfig OracleConfig

	// Number of quote native in a quote lot. Must be a power of 10.
	//
	// Primarily useful for increasing the tick size on the market: A lot price
	// of 1 becomes a native price of quote_lot_size/base_lot_size becomes a
	// ui price of quote_lot_size*base_decimals/base_lot_size/quote_decimals.
	QuoteLotSize int64

	// Number of base native in a base lot. Must be a power of 10.
	//
	// Example: If base decimals for the underlying asset is 6, base lot size
	// is 100 and and base position lots is 10_000 then base position native is
	// 1_000_000 and base position ui is 1.
	BaseLotSize int64

	// Total number of orders seen
	SeqNum uint64

	// Timestamp in seconds that the market was registered at.
	RegistrationTime int64

	// Fees
	//
	// Fee (in 10^-6) when matching maker orders.
	// maker_fee < 0 it means some of the taker_fees goes to the maker
	// maker_fee > 0, it means no taker_fee to the maker, and maker fee goes to the referral
	MakerFee int64

	// Fee (in 10^-6) for taker orders, always >= 0.
	TakerFee int64

	// Total fees accrued in native quote
	FeesAccrued ag_binary.Uint128

	// Total fees settled in native quote
	FeesToReferrers ag_binary.Uint128

	// Referrer rebates to be distributed
	ReferrerRebatesAccrued uint64

	// Fees generated and available to withdraw via sweep_fees
	FeesAvailable uint64

	// Cumulative maker volume (same as taker volume) in quote native units
	MakerVolume ag_binary.Uint128

	// Cumulative taker volume in quote native units due to place take orders
	TakerVolumeWoOo   ag_binary.Uint128
	BaseMint          ag_solanago.PublicKey
	QuoteMint         ag_solanago.PublicKey
	MarketBaseVault   ag_solanago.PublicKey
	BaseDepositTotal  uint64
	MarketQuoteVault  ag_solanago.PublicKey
	QuoteDepositTotal uint64
	Reserved          [128]uint8
}

var MarketDiscriminator = [8]byte{219, 190, 213, 55, 0, 227, 198, 154}

func (obj MarketSB) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MarketDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `BaseDecimals` param:
	err = encoder.Encode(obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Serialize `QuoteDecimals` param:
	err = encoder.Encode(obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `MarketAuthority` param:
	err = encoder.Encode(obj.MarketAuthority)
	if err != nil {
		return err
	}
	// Serialize `TimeExpiry` param:
	err = encoder.Encode(obj.TimeExpiry)
	if err != nil {
		return err
	}
	// Serialize `CollectFeeAdmin` param:
	err = encoder.Encode(obj.CollectFeeAdmin)
	if err != nil {
		return err
	}
	// Serialize `OpenOrdersAdmin` param:
	err = encoder.Encode(obj.OpenOrdersAdmin)
	if err != nil {
		return err
	}
	// Serialize `ConsumeEventsAdmin` param:
	err = encoder.Encode(obj.ConsumeEventsAdmin)
	if err != nil {
		return err
	}
	// Serialize `CloseMarketAdmin` param:
	err = encoder.Encode(obj.CloseMarketAdmin)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Bids` param:
	err = encoder.Encode(obj.Bids)
	if err != nil {
		return err
	}
	// Serialize `Asks` param:
	err = encoder.Encode(obj.Asks)
	if err != nil {
		return err
	}
	// Serialize `EventHeap` param:
	err = encoder.Encode(obj.EventHeap)
	if err != nil {
		return err
	}
	// Serialize `OracleA` param:
	err = encoder.Encode(obj.OracleA)
	if err != nil {
		return err
	}
	// Serialize `OracleB` param:
	err = encoder.Encode(obj.OracleB)
	if err != nil {
		return err
	}
	// Serialize `OracleConfig` param:
	err = encoder.Encode(obj.OracleConfig)
	if err != nil {
		return err
	}
	// Serialize `QuoteLotSize` param:
	err = encoder.Encode(obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Serialize `BaseLotSize` param:
	err = encoder.Encode(obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Serialize `SeqNum` param:
	err = encoder.Encode(obj.SeqNum)
	if err != nil {
		return err
	}
	// Serialize `RegistrationTime` param:
	err = encoder.Encode(obj.RegistrationTime)
	if err != nil {
		return err
	}
	// Serialize `MakerFee` param:
	err = encoder.Encode(obj.MakerFee)
	if err != nil {
		return err
	}
	// Serialize `TakerFee` param:
	err = encoder.Encode(obj.TakerFee)
	if err != nil {
		return err
	}
	// Serialize `FeesAccrued` param:
	err = encoder.Encode(obj.FeesAccrued)
	if err != nil {
		return err
	}
	// Serialize `FeesToReferrers` param:
	err = encoder.Encode(obj.FeesToReferrers)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRebatesAccrued` param:
	err = encoder.Encode(obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	// Serialize `FeesAvailable` param:
	err = encoder.Encode(obj.FeesAvailable)
	if err != nil {
		return err
	}
	// Serialize `MakerVolume` param:
	err = encoder.Encode(obj.MakerVolume)
	if err != nil {
		return err
	}
	// Serialize `TakerVolumeWoOo` param:
	err = encoder.Encode(obj.TakerVolumeWoOo)
	if err != nil {
		return err
	}
	// Serialize `BaseMint` param:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return err
	}
	// Serialize `QuoteMint` param:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return err
	}
	// Serialize `MarketBaseVault` param:
	err = encoder.Encode(obj.MarketBaseVault)
	if err != nil {
		return err
	}
	// Serialize `BaseDepositTotal` param:
	err = encoder.Encode(obj.BaseDepositTotal)
	if err != nil {
		return err
	}
	// Serialize `MarketQuoteVault` param:
	err = encoder.Encode(obj.MarketQuoteVault)
	if err != nil {
		return err
	}
	// Serialize `QuoteDepositTotal` param:
	err = encoder.Encode(obj.QuoteDepositTotal)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketSB) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MarketDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[219 190 213 55 0 227 198 154]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `BaseDecimals`:
	err = decoder.Decode(&obj.BaseDecimals)
	if err != nil {
		return err
	}
	// Deserialize `QuoteDecimals`:
	err = decoder.Decode(&obj.QuoteDecimals)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `MarketAuthority`:
	err = decoder.Decode(&obj.MarketAuthority)
	if err != nil {
		return err
	}
	// Deserialize `TimeExpiry`:
	err = decoder.Decode(&obj.TimeExpiry)
	if err != nil {
		return err
	}
	// Deserialize `CollectFeeAdmin`:
	err = decoder.Decode(&obj.CollectFeeAdmin)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrdersAdmin`:
	err = decoder.Decode(&obj.OpenOrdersAdmin)
	if err != nil {
		return err
	}
	// Deserialize `ConsumeEventsAdmin`:
	err = decoder.Decode(&obj.ConsumeEventsAdmin)
	if err != nil {
		return err
	}
	// Deserialize `CloseMarketAdmin`:
	err = decoder.Decode(&obj.CloseMarketAdmin)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Bids`:
	err = decoder.Decode(&obj.Bids)
	if err != nil {
		return err
	}
	// Deserialize `Asks`:
	err = decoder.Decode(&obj.Asks)
	if err != nil {
		return err
	}
	// Deserialize `EventHeap`:
	err = decoder.Decode(&obj.EventHeap)
	if err != nil {
		return err
	}
	// Deserialize `OracleA`:
	err = decoder.Decode(&obj.OracleA)
	if err != nil {
		return err
	}
	// Deserialize `OracleB`:
	err = decoder.Decode(&obj.OracleB)
	if err != nil {
		return err
	}
	// Deserialize `OracleConfig`:
	err = decoder.Decode(&obj.OracleConfig)
	if err != nil {
		return err
	}
	// Deserialize `QuoteLotSize`:
	err = decoder.Decode(&obj.QuoteLotSize)
	if err != nil {
		return err
	}
	// Deserialize `BaseLotSize`:
	err = decoder.Decode(&obj.BaseLotSize)
	if err != nil {
		return err
	}
	// Deserialize `SeqNum`:
	err = decoder.Decode(&obj.SeqNum)
	if err != nil {
		return err
	}
	// Deserialize `RegistrationTime`:
	err = decoder.Decode(&obj.RegistrationTime)
	if err != nil {
		return err
	}
	// Deserialize `MakerFee`:
	err = decoder.Decode(&obj.MakerFee)
	if err != nil {
		return err
	}
	// Deserialize `TakerFee`:
	err = decoder.Decode(&obj.TakerFee)
	if err != nil {
		return err
	}
	// Deserialize `FeesAccrued`:
	err = decoder.Decode(&obj.FeesAccrued)
	if err != nil {
		return err
	}
	// Deserialize `FeesToReferrers`:
	err = decoder.Decode(&obj.FeesToReferrers)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRebatesAccrued`:
	err = decoder.Decode(&obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	// Deserialize `FeesAvailable`:
	err = decoder.Decode(&obj.FeesAvailable)
	if err != nil {
		return err
	}
	// Deserialize `MakerVolume`:
	err = decoder.Decode(&obj.MakerVolume)
	if err != nil {
		return err
	}
	// Deserialize `TakerVolumeWoOo`:
	err = decoder.Decode(&obj.TakerVolumeWoOo)
	if err != nil {
		return err
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return err
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return err
	}
	// Deserialize `MarketBaseVault`:
	err = decoder.Decode(&obj.MarketBaseVault)
	if err != nil {
		return err
	}
	// Deserialize `BaseDepositTotal`:
	err = decoder.Decode(&obj.BaseDepositTotal)
	if err != nil {
		return err
	}
	// Deserialize `MarketQuoteVault`:
	err = decoder.Decode(&obj.MarketQuoteVault)
	if err != nil {
		return err
	}
	// Deserialize `QuoteDepositTotal`:
	err = decoder.Decode(&obj.QuoteDepositTotal)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OpenOrdersAccount struct {
	Owner      ag_solanago.PublicKey
	Market     ag_solanago.PublicKey
	Name       [32]uint8
	Delegate   NonZeroPubkeyOption
	AccountNum uint32
	Bump       uint8
	Version    uint8
	Padding    [2]uint8
	Position   Position
	OpenOrders [24]OpenOrder
}

var OpenOrdersAccountDiscriminator = [8]byte{255, 194, 78, 123, 16, 105, 208, 165}

func (obj OpenOrdersAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OpenOrdersAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Delegate` param:
	err = encoder.Encode(obj.Delegate)
	if err != nil {
		return err
	}
	// Serialize `AccountNum` param:
	err = encoder.Encode(obj.AccountNum)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Position` param:
	err = encoder.Encode(obj.Position)
	if err != nil {
		return err
	}
	// Serialize `OpenOrders` param:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenOrdersAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OpenOrdersAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[255 194 78 123 16 105 208 165]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Delegate`:
	err = decoder.Decode(&obj.Delegate)
	if err != nil {
		return err
	}
	// Deserialize `AccountNum`:
	err = decoder.Decode(&obj.AccountNum)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Position`:
	err = decoder.Decode(&obj.Position)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return err
	}
	return nil
}

type OpenOrdersIndexer struct {
	Bump           uint8
	CreatedCounter uint32
	Addresses      []ag_solanago.PublicKey
}

var OpenOrdersIndexerDiscriminator = [8]byte{195, 83, 128, 213, 204, 91, 19, 150}

func (obj OpenOrdersIndexer) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OpenOrdersIndexerDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CreatedCounter` param:
	err = encoder.Encode(obj.CreatedCounter)
	if err != nil {
		return err
	}
	// Serialize `Addresses` param:
	err = encoder.Encode(obj.Addresses)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenOrdersIndexer) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OpenOrdersIndexerDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[195 83 128 213 204 91 19 150]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CreatedCounter`:
	err = decoder.Decode(&obj.CreatedCounter)
	if err != nil {
		return err
	}
	// Deserialize `Addresses`:
	err = decoder.Decode(&obj.Addresses)
	if err != nil {
		return err
	}
	return nil
}

type StubOracle struct {
	Owner          ag_solanago.PublicKey
	Mint           ag_solanago.PublicKey
	Price          int64
	LastUpdateTs   int64
	LastUpdateSlot uint64
	Deviation      int64
	Reserved       [104]uint8
}

var StubOracleDiscriminator = [8]byte{224, 251, 254, 99, 177, 174, 137, 4}

func (obj StubOracle) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StubOracleDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Mint` param:
	err = encoder.Encode(obj.Mint)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateTs` param:
	err = encoder.Encode(obj.LastUpdateTs)
	if err != nil {
		return err
	}
	// Serialize `LastUpdateSlot` param:
	err = encoder.Encode(obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Serialize `Deviation` param:
	err = encoder.Encode(obj.Deviation)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *StubOracle) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StubOracleDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[224 251 254 99 177 174 137 4]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Mint`:
	err = decoder.Decode(&obj.Mint)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateTs`:
	err = decoder.Decode(&obj.LastUpdateTs)
	if err != nil {
		return err
	}
	// Deserialize `LastUpdateSlot`:
	err = decoder.Decode(&obj.LastUpdateSlot)
	if err != nil {
		return err
	}
	// Deserialize `Deviation`:
	err = decoder.Decode(&obj.Deviation)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type BookSide struct {
	Roots         [2]OrderTreeRoot
	ReservedRoots [4]OrderTreeRoot
	Reserved      [256]uint8
	Nodes         OrderTreeNodes
}

var BookSideDiscriminator = [8]byte{72, 44, 225, 141, 178, 130, 97, 57}

func (obj BookSide) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(BookSideDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Roots` param:
	err = encoder.Encode(obj.Roots)
	if err != nil {
		return err
	}
	// Serialize `ReservedRoots` param:
	err = encoder.Encode(obj.ReservedRoots)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `Nodes` param:
	err = encoder.Encode(obj.Nodes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *BookSide) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(BookSideDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[72 44 225 141 178 130 97 57]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Roots`:
	err = decoder.Decode(&obj.Roots)
	if err != nil {
		return err
	}
	// Deserialize `ReservedRoots`:
	err = decoder.Decode(&obj.ReservedRoots)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `Nodes`:
	err = decoder.Decode(&obj.Nodes)
	if err != nil {
		return err
	}
	return nil
}

type EventHeap struct {
	Header   EventHeapHeader
	Nodes    [600]EventNode
	Reserved [64]uint8
}

var EventHeapDiscriminator = [8]byte{119, 59, 61, 19, 165, 84, 57, 175}

func (obj EventHeap) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EventHeapDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Header` param:
	err = encoder.Encode(obj.Header)
	if err != nil {
		return err
	}
	// Serialize `Nodes` param:
	err = encoder.Encode(obj.Nodes)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventHeap) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EventHeapDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[119 59 61 19 165 84 57 175]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Header`:
	err = decoder.Decode(&obj.Header)
	if err != nil {
		return err
	}
	// Deserialize `Nodes`:
	err = decoder.Decode(&obj.Nodes)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}
