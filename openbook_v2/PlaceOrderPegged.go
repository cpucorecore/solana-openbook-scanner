// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Place an oracle-peg order.
type PlaceOrderPegged struct {
	Args *PlaceOrderPeggedArgs

	// [0] = [SIGNER] signer
	//
	// [1] = [WRITE] openOrdersAccount
	//
	// [2] = [SIGNER] openOrdersAdmin
	//
	// [3] = [WRITE] userTokenAccount
	//
	// [4] = [WRITE] market
	//
	// [5] = [WRITE] bids
	//
	// [6] = [WRITE] asks
	//
	// [7] = [WRITE] eventHeap
	//
	// [8] = [WRITE] marketVault
	//
	// [9] = [] oracleA
	//
	// [10] = [] oracleB
	//
	// [11] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPlaceOrderPeggedInstructionBuilder creates a new `PlaceOrderPegged` instruction builder.
func NewPlaceOrderPeggedInstructionBuilder() *PlaceOrderPegged {
	nd := &PlaceOrderPegged{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *PlaceOrderPegged) SetArgs(args PlaceOrderPeggedArgs) *PlaceOrderPegged {
	inst.Args = &args
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *PlaceOrderPegged) SetSignerAccount(signer ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *PlaceOrderPegged) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *PlaceOrderPegged) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *PlaceOrderPegged) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenOrdersAdminAccount sets the "openOrdersAdmin" account.
func (inst *PlaceOrderPegged) SetOpenOrdersAdminAccount(openOrdersAdmin ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openOrdersAdmin).SIGNER()
	return inst
}

// GetOpenOrdersAdminAccount gets the "openOrdersAdmin" account.
func (inst *PlaceOrderPegged) GetOpenOrdersAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetUserTokenAccountAccount sets the "userTokenAccount" account.
func (inst *PlaceOrderPegged) SetUserTokenAccountAccount(userTokenAccount ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(userTokenAccount).WRITE()
	return inst
}

// GetUserTokenAccountAccount gets the "userTokenAccount" account.
func (inst *PlaceOrderPegged) GetUserTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMarketAccount sets the "market" account.
func (inst *PlaceOrderPegged) SetMarketAccount(market ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *PlaceOrderPegged) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetBidsAccount sets the "bids" account.
func (inst *PlaceOrderPegged) SetBidsAccount(bids ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *PlaceOrderPegged) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAsksAccount sets the "asks" account.
func (inst *PlaceOrderPegged) SetAsksAccount(asks ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *PlaceOrderPegged) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetEventHeapAccount sets the "eventHeap" account.
func (inst *PlaceOrderPegged) SetEventHeapAccount(eventHeap ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(eventHeap).WRITE()
	return inst
}

// GetEventHeapAccount gets the "eventHeap" account.
func (inst *PlaceOrderPegged) GetEventHeapAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetMarketVaultAccount sets the "marketVault" account.
func (inst *PlaceOrderPegged) SetMarketVaultAccount(marketVault ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(marketVault).WRITE()
	return inst
}

// GetMarketVaultAccount gets the "marketVault" account.
func (inst *PlaceOrderPegged) GetMarketVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetOracleAAccount sets the "oracleA" account.
func (inst *PlaceOrderPegged) SetOracleAAccount(oracleA ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(oracleA)
	return inst
}

// GetOracleAAccount gets the "oracleA" account.
func (inst *PlaceOrderPegged) GetOracleAAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetOracleBAccount sets the "oracleB" account.
func (inst *PlaceOrderPegged) SetOracleBAccount(oracleB ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(oracleB)
	return inst
}

// GetOracleBAccount gets the "oracleB" account.
func (inst *PlaceOrderPegged) GetOracleBAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *PlaceOrderPegged) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *PlaceOrderPegged {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *PlaceOrderPegged) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst PlaceOrderPegged) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PlaceOrderPegged,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PlaceOrderPegged) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PlaceOrderPegged) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenOrdersAdmin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.UserTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.EventHeap is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.MarketVault is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.OracleA is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.OracleB is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *PlaceOrderPegged) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PlaceOrderPegged")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("     openOrders", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("openOrdersAdmin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      userToken", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         market", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           bids", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("           asks", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      eventHeap", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("    marketVault", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("        oracleA", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("        oracleB", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("   tokenProgram", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj PlaceOrderPegged) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PlaceOrderPegged) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewPlaceOrderPeggedInstruction declares a new PlaceOrderPegged instruction with the provided parameters and accounts.
func NewPlaceOrderPeggedInstruction(
	// Parameters:
	args PlaceOrderPeggedArgs,
	// Accounts:
	signer ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	openOrdersAdmin ag_solanago.PublicKey,
	userTokenAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	eventHeap ag_solanago.PublicKey,
	marketVault ag_solanago.PublicKey,
	oracleA ag_solanago.PublicKey,
	oracleB ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *PlaceOrderPegged {
	return NewPlaceOrderPeggedInstructionBuilder().
		SetArgs(args).
		SetSignerAccount(signer).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetOpenOrdersAdminAccount(openOrdersAdmin).
		SetUserTokenAccountAccount(userTokenAccount).
		SetMarketAccount(market).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetEventHeapAccount(eventHeap).
		SetMarketVaultAccount(marketVault).
		SetOracleAAccount(oracleA).
		SetOracleBAccount(oracleB).
		SetTokenProgramAccount(tokenProgram)
}
