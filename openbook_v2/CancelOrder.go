// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Cancel an order by its `order_id`.
//
// Note that this doesn't emit an [`OutEvent`](crate::state::OutEvent) because a
// maker knows that they will be passing in their own [`OpenOrdersAccount`](crate::state::OpenOrdersAccount).
type CancelOrder struct {
	OrderId *ag_binary.Uint128

	// [0] = [SIGNER] signer
	//
	// [1] = [WRITE] openOrdersAccount
	//
	// [2] = [] market
	//
	// [3] = [WRITE] bids
	//
	// [4] = [WRITE] asks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCancelOrderInstructionBuilder creates a new `CancelOrder` instruction builder.
func NewCancelOrderInstructionBuilder() *CancelOrder {
	nd := &CancelOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetOrderId sets the "orderId" parameter.
func (inst *CancelOrder) SetOrderId(orderId ag_binary.Uint128) *CancelOrder {
	inst.OrderId = &orderId
	return inst
}

// SetSignerAccount sets the "signer" account.
func (inst *CancelOrder) SetSignerAccount(signer ag_solanago.PublicKey) *CancelOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(signer).SIGNER()
	return inst
}

// GetSignerAccount gets the "signer" account.
func (inst *CancelOrder) GetSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *CancelOrder) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *CancelOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *CancelOrder) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMarketAccount sets the "market" account.
func (inst *CancelOrder) SetMarketAccount(market ag_solanago.PublicKey) *CancelOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CancelOrder) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidsAccount sets the "bids" account.
func (inst *CancelOrder) SetBidsAccount(bids ag_solanago.PublicKey) *CancelOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *CancelOrder) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAsksAccount sets the "asks" account.
func (inst *CancelOrder) SetAsksAccount(asks ag_solanago.PublicKey) *CancelOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
func (inst *CancelOrder) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CancelOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CancelOrder,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CancelOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CancelOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.OrderId == nil {
			return errors.New("OrderId parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Signer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Asks is not set")
		}
	}
	return nil
}

func (inst *CancelOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CancelOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("OrderId", *inst.OrderId))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("    signer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("openOrders", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    market", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("      bids", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("      asks", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CancelOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CancelOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	return nil
}

// NewCancelOrderInstruction declares a new CancelOrder instruction with the provided parameters and accounts.
func NewCancelOrderInstruction(
	// Parameters:
	orderId ag_binary.Uint128,
	// Accounts:
	signer ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey) *CancelOrder {
	return NewCancelOrderInstructionBuilder().
		SetOrderId(orderId).
		SetSignerAccount(signer).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetMarketAccount(market).
		SetBidsAccount(bids).
		SetAsksAccount(asks)
}
