// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Create an [`OpenOrdersAccount`](crate::state::OpenOrdersAccount).
type CreateOpenOrdersAccount struct {
	Name *string

	// [0] = [WRITE, SIGNER] payer
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [] delegateAccount
	//
	// [3] = [WRITE] openOrdersIndexer
	//
	// [4] = [WRITE] openOrdersAccount
	//
	// [5] = [] market
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateOpenOrdersAccountInstructionBuilder creates a new `CreateOpenOrdersAccount` instruction builder.
func NewCreateOpenOrdersAccountInstructionBuilder() *CreateOpenOrdersAccount {
	nd := &CreateOpenOrdersAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *CreateOpenOrdersAccount) SetName(name string) *CreateOpenOrdersAccount {
	inst.Name = &name
	return inst
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateOpenOrdersAccount) SetPayerAccount(payer ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateOpenOrdersAccount) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CreateOpenOrdersAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CreateOpenOrdersAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDelegateAccountAccount sets the "delegateAccount" account.
func (inst *CreateOpenOrdersAccount) SetDelegateAccountAccount(delegateAccount ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(delegateAccount)
	return inst
}

// GetDelegateAccountAccount gets the "delegateAccount" account.
func (inst *CreateOpenOrdersAccount) GetDelegateAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOpenOrdersIndexerAccount sets the "openOrdersIndexer" account.
func (inst *CreateOpenOrdersAccount) SetOpenOrdersIndexerAccount(openOrdersIndexer ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(openOrdersIndexer).WRITE()
	return inst
}

// GetOpenOrdersIndexerAccount gets the "openOrdersIndexer" account.
func (inst *CreateOpenOrdersAccount) GetOpenOrdersIndexerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *CreateOpenOrdersAccount) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *CreateOpenOrdersAccount) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMarketAccount sets the "market" account.
func (inst *CreateOpenOrdersAccount) SetMarketAccount(market ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
func (inst *CreateOpenOrdersAccount) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateOpenOrdersAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateOpenOrdersAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CreateOpenOrdersAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateOpenOrdersAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateOpenOrdersAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateOpenOrdersAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.DelegateAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OpenOrdersIndexer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateOpenOrdersAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateOpenOrdersAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Name", *inst.Name))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            payer", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("            owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         delegate", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("openOrdersIndexer", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("       openOrders", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           market", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CreateOpenOrdersAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateOpenOrdersAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateOpenOrdersAccountInstruction declares a new CreateOpenOrdersAccount instruction with the provided parameters and accounts.
func NewCreateOpenOrdersAccountInstruction(
	// Parameters:
	name string,
	// Accounts:
	payer ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	delegateAccount ag_solanago.PublicKey,
	openOrdersIndexer ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateOpenOrdersAccount {
	return NewCreateOpenOrdersAccountInstructionBuilder().
		SetName(name).
		SetPayerAccount(payer).
		SetOwnerAccount(owner).
		SetDelegateAccountAccount(delegateAccount).
		SetOpenOrdersIndexerAccount(openOrdersIndexer).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetMarketAccount(market).
		SetSystemProgramAccount(systemProgram)
}
