// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Close an [`OpenOrdersAccount`](crate::state::OpenOrdersAccount).
type CloseOpenOrdersAccount struct {

	// [0] = [SIGNER] owner
	//
	// [1] = [WRITE] openOrdersIndexer
	//
	// [2] = [WRITE] openOrdersAccount
	//
	// [3] = [WRITE] solDestination
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseOpenOrdersAccountInstructionBuilder creates a new `CloseOpenOrdersAccount` instruction builder.
func NewCloseOpenOrdersAccountInstructionBuilder() *CloseOpenOrdersAccount {
	nd := &CloseOpenOrdersAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetOwnerAccount sets the "owner" account.
func (inst *CloseOpenOrdersAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CloseOpenOrdersAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOpenOrdersIndexerAccount sets the "openOrdersIndexer" account.
func (inst *CloseOpenOrdersAccount) SetOpenOrdersIndexerAccount(openOrdersIndexer ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openOrdersIndexer).WRITE()
	return inst
}

// GetOpenOrdersIndexerAccount gets the "openOrdersIndexer" account.
func (inst *CloseOpenOrdersAccount) GetOpenOrdersIndexerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetOpenOrdersAccountAccount sets the "openOrdersAccount" account.
func (inst *CloseOpenOrdersAccount) SetOpenOrdersAccountAccount(openOrdersAccount ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(openOrdersAccount).WRITE()
	return inst
}

// GetOpenOrdersAccountAccount gets the "openOrdersAccount" account.
func (inst *CloseOpenOrdersAccount) GetOpenOrdersAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSolDestinationAccount sets the "solDestination" account.
func (inst *CloseOpenOrdersAccount) SetSolDestinationAccount(solDestination ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(solDestination).WRITE()
	return inst
}

// GetSolDestinationAccount gets the "solDestination" account.
func (inst *CloseOpenOrdersAccount) GetSolDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CloseOpenOrdersAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CloseOpenOrdersAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst CloseOpenOrdersAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CloseOpenOrdersAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseOpenOrdersAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseOpenOrdersAccount) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenOrdersIndexer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.OpenOrdersAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SolDestination is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CloseOpenOrdersAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseOpenOrdersAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("            owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("openOrdersIndexer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       openOrders", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("   solDestination", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj CloseOpenOrdersAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseOpenOrdersAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseOpenOrdersAccountInstruction declares a new CloseOpenOrdersAccount instruction with the provided parameters and accounts.
func NewCloseOpenOrdersAccountInstruction(
	// Accounts:
	owner ag_solanago.PublicKey,
	openOrdersIndexer ag_solanago.PublicKey,
	openOrdersAccount ag_solanago.PublicKey,
	solDestination ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CloseOpenOrdersAccount {
	return NewCloseOpenOrdersAccountInstructionBuilder().
		SetOwnerAccount(owner).
		SetOpenOrdersIndexerAccount(openOrdersIndexer).
		SetOpenOrdersAccountAccount(openOrdersAccount).
		SetSolDestinationAccount(solDestination).
		SetSystemProgramAccount(systemProgram)
}
