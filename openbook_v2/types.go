// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package openbook_v2

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type NonZeroPubkeyOption struct {
	Key ag_solanago.PublicKey
}

func (obj NonZeroPubkeyOption) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	return nil
}

func (obj *NonZeroPubkeyOption) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	return nil
}

type Position struct {
	// Base lots in open bids
	BidsBaseLots int64

	// Base lots in open asks
	AsksBaseLots             int64
	BaseFreeNative           uint64
	QuoteFreeNative          uint64
	LockedMakerFees          uint64
	ReferrerRebatesAvailable uint64

	// Count of ixs when events are added to the heap
	// To avoid this, send remaining accounts in order to process the events
	PenaltyHeapCount uint64

	// Cumulative maker volume in quote native units (display only)
	MakerVolume ag_binary.Uint128

	// Cumulative taker volume in quote native units (display only)
	TakerVolume ag_binary.Uint128

	// Quote lots in open bids
	BidsQuoteLots int64
	Reserved      [64]uint8
}

func (obj Position) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BidsBaseLots` param:
	err = encoder.Encode(obj.BidsBaseLots)
	if err != nil {
		return err
	}
	// Serialize `AsksBaseLots` param:
	err = encoder.Encode(obj.AsksBaseLots)
	if err != nil {
		return err
	}
	// Serialize `BaseFreeNative` param:
	err = encoder.Encode(obj.BaseFreeNative)
	if err != nil {
		return err
	}
	// Serialize `QuoteFreeNative` param:
	err = encoder.Encode(obj.QuoteFreeNative)
	if err != nil {
		return err
	}
	// Serialize `LockedMakerFees` param:
	err = encoder.Encode(obj.LockedMakerFees)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRebatesAvailable` param:
	err = encoder.Encode(obj.ReferrerRebatesAvailable)
	if err != nil {
		return err
	}
	// Serialize `PenaltyHeapCount` param:
	err = encoder.Encode(obj.PenaltyHeapCount)
	if err != nil {
		return err
	}
	// Serialize `MakerVolume` param:
	err = encoder.Encode(obj.MakerVolume)
	if err != nil {
		return err
	}
	// Serialize `TakerVolume` param:
	err = encoder.Encode(obj.TakerVolume)
	if err != nil {
		return err
	}
	// Serialize `BidsQuoteLots` param:
	err = encoder.Encode(obj.BidsQuoteLots)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Position) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BidsBaseLots`:
	err = decoder.Decode(&obj.BidsBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `AsksBaseLots`:
	err = decoder.Decode(&obj.AsksBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `BaseFreeNative`:
	err = decoder.Decode(&obj.BaseFreeNative)
	if err != nil {
		return err
	}
	// Deserialize `QuoteFreeNative`:
	err = decoder.Decode(&obj.QuoteFreeNative)
	if err != nil {
		return err
	}
	// Deserialize `LockedMakerFees`:
	err = decoder.Decode(&obj.LockedMakerFees)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRebatesAvailable`:
	err = decoder.Decode(&obj.ReferrerRebatesAvailable)
	if err != nil {
		return err
	}
	// Deserialize `PenaltyHeapCount`:
	err = decoder.Decode(&obj.PenaltyHeapCount)
	if err != nil {
		return err
	}
	// Deserialize `MakerVolume`:
	err = decoder.Decode(&obj.MakerVolume)
	if err != nil {
		return err
	}
	// Deserialize `TakerVolume`:
	err = decoder.Decode(&obj.TakerVolume)
	if err != nil {
		return err
	}
	// Deserialize `BidsQuoteLots`:
	err = decoder.Decode(&obj.BidsQuoteLots)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OpenOrder struct {
	Id       ag_binary.Uint128
	ClientId uint64

	// Price at which user's assets were locked
	LockedPrice int64
	IsFree      uint8
	SideAndTree uint8
	Padding     [6]uint8
}

func (obj OpenOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Id` param:
	err = encoder.Encode(obj.Id)
	if err != nil {
		return err
	}
	// Serialize `ClientId` param:
	err = encoder.Encode(obj.ClientId)
	if err != nil {
		return err
	}
	// Serialize `LockedPrice` param:
	err = encoder.Encode(obj.LockedPrice)
	if err != nil {
		return err
	}
	// Serialize `IsFree` param:
	err = encoder.Encode(obj.IsFree)
	if err != nil {
		return err
	}
	// Serialize `SideAndTree` param:
	err = encoder.Encode(obj.SideAndTree)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Id`:
	err = decoder.Decode(&obj.Id)
	if err != nil {
		return err
	}
	// Deserialize `ClientId`:
	err = decoder.Decode(&obj.ClientId)
	if err != nil {
		return err
	}
	// Deserialize `LockedPrice`:
	err = decoder.Decode(&obj.LockedPrice)
	if err != nil {
		return err
	}
	// Deserialize `IsFree`:
	err = decoder.Decode(&obj.IsFree)
	if err != nil {
		return err
	}
	// Deserialize `SideAndTree`:
	err = decoder.Decode(&obj.SideAndTree)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type OracleConfig struct {
	ConfFilter        int64
	MaxStalenessSlots int64
	Reserved          [72]uint8
}

func (obj OracleConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfFilter` param:
	err = encoder.Encode(obj.ConfFilter)
	if err != nil {
		return err
	}
	// Serialize `MaxStalenessSlots` param:
	err = encoder.Encode(obj.MaxStalenessSlots)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OracleConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfFilter`:
	err = decoder.Decode(&obj.ConfFilter)
	if err != nil {
		return err
	}
	// Deserialize `MaxStalenessSlots`:
	err = decoder.Decode(&obj.MaxStalenessSlots)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OracleConfigParams struct {
	ConfFilter        int32
	MaxStalenessSlots *uint32 `bin:"optional"`
}

func (obj OracleConfigParams) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `ConfFilter` param:
	err = encoder.Encode(obj.ConfFilter)
	if err != nil {
		return err
	}
	// Serialize `MaxStalenessSlots` param (optional):
	{
		if obj.MaxStalenessSlots == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.MaxStalenessSlots)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (obj *OracleConfigParams) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `ConfFilter`:
	err = decoder.Decode(&obj.ConfFilter)
	if err != nil {
		return err
	}
	// Deserialize `MaxStalenessSlots` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.MaxStalenessSlots)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

type EventHeapHeader struct {
	FreeHead uint16
	UsedHead uint16
	Count    uint16
	Padd     uint16
	SeqNum   uint64
}

func (obj EventHeapHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `FreeHead` param:
	err = encoder.Encode(obj.FreeHead)
	if err != nil {
		return err
	}
	// Serialize `UsedHead` param:
	err = encoder.Encode(obj.UsedHead)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `Padd` param:
	err = encoder.Encode(obj.Padd)
	if err != nil {
		return err
	}
	// Serialize `SeqNum` param:
	err = encoder.Encode(obj.SeqNum)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventHeapHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `FreeHead`:
	err = decoder.Decode(&obj.FreeHead)
	if err != nil {
		return err
	}
	// Deserialize `UsedHead`:
	err = decoder.Decode(&obj.UsedHead)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `Padd`:
	err = decoder.Decode(&obj.Padd)
	if err != nil {
		return err
	}
	// Deserialize `SeqNum`:
	err = decoder.Decode(&obj.SeqNum)
	if err != nil {
		return err
	}
	return nil
}

type EventNode struct {
	Next  uint16
	Prev  uint16
	Pad   [4]uint8
	Event AnyEvent
}

func (obj EventNode) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Next` param:
	err = encoder.Encode(obj.Next)
	if err != nil {
		return err
	}
	// Serialize `Prev` param:
	err = encoder.Encode(obj.Prev)
	if err != nil {
		return err
	}
	// Serialize `Pad` param:
	err = encoder.Encode(obj.Pad)
	if err != nil {
		return err
	}
	// Serialize `Event` param:
	err = encoder.Encode(obj.Event)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventNode) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Next`:
	err = decoder.Decode(&obj.Next)
	if err != nil {
		return err
	}
	// Deserialize `Prev`:
	err = decoder.Decode(&obj.Prev)
	if err != nil {
		return err
	}
	// Deserialize `Pad`:
	err = decoder.Decode(&obj.Pad)
	if err != nil {
		return err
	}
	// Deserialize `Event`:
	err = decoder.Decode(&obj.Event)
	if err != nil {
		return err
	}
	return nil
}

type AnyEvent struct {
	EventType uint8
	Padding   [143]uint8
}

func (obj AnyEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EventType` param:
	err = encoder.Encode(obj.EventType)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AnyEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EventType`:
	err = decoder.Decode(&obj.EventType)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type FillEvent struct {
	EventType          uint8
	TakerSide          uint8
	MakerOut           uint8
	MakerSlot          uint8
	Padding            [4]uint8
	Timestamp          uint64
	SeqNum             uint64
	Maker              ag_solanago.PublicKey
	MakerTimestamp     uint64
	Taker              ag_solanago.PublicKey
	TakerClientOrderId uint64
	Price              int64
	PegLimit           int64
	Quantity           int64
	MakerClientOrderId uint64
	Reserved           [8]uint8
}

func (obj FillEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EventType` param:
	err = encoder.Encode(obj.EventType)
	if err != nil {
		return err
	}
	// Serialize `TakerSide` param:
	err = encoder.Encode(obj.TakerSide)
	if err != nil {
		return err
	}
	// Serialize `MakerOut` param:
	err = encoder.Encode(obj.MakerOut)
	if err != nil {
		return err
	}
	// Serialize `MakerSlot` param:
	err = encoder.Encode(obj.MakerSlot)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `SeqNum` param:
	err = encoder.Encode(obj.SeqNum)
	if err != nil {
		return err
	}
	// Serialize `Maker` param:
	err = encoder.Encode(obj.Maker)
	if err != nil {
		return err
	}
	// Serialize `MakerTimestamp` param:
	err = encoder.Encode(obj.MakerTimestamp)
	if err != nil {
		return err
	}
	// Serialize `Taker` param:
	err = encoder.Encode(obj.Taker)
	if err != nil {
		return err
	}
	// Serialize `TakerClientOrderId` param:
	err = encoder.Encode(obj.TakerClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `PegLimit` param:
	err = encoder.Encode(obj.PegLimit)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	// Serialize `MakerClientOrderId` param:
	err = encoder.Encode(obj.MakerClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *FillEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EventType`:
	err = decoder.Decode(&obj.EventType)
	if err != nil {
		return err
	}
	// Deserialize `TakerSide`:
	err = decoder.Decode(&obj.TakerSide)
	if err != nil {
		return err
	}
	// Deserialize `MakerOut`:
	err = decoder.Decode(&obj.MakerOut)
	if err != nil {
		return err
	}
	// Deserialize `MakerSlot`:
	err = decoder.Decode(&obj.MakerSlot)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `SeqNum`:
	err = decoder.Decode(&obj.SeqNum)
	if err != nil {
		return err
	}
	// Deserialize `Maker`:
	err = decoder.Decode(&obj.Maker)
	if err != nil {
		return err
	}
	// Deserialize `MakerTimestamp`:
	err = decoder.Decode(&obj.MakerTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `Taker`:
	err = decoder.Decode(&obj.Taker)
	if err != nil {
		return err
	}
	// Deserialize `TakerClientOrderId`:
	err = decoder.Decode(&obj.TakerClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `PegLimit`:
	err = decoder.Decode(&obj.PegLimit)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	// Deserialize `MakerClientOrderId`:
	err = decoder.Decode(&obj.MakerClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type OutEvent struct {
	EventType uint8
	Side      uint8
	OwnerSlot uint8
	Padding0  [5]uint8
	Timestamp uint64
	SeqNum    uint64
	Owner     ag_solanago.PublicKey
	Quantity  int64
	Padding1  [80]uint8
}

func (obj OutEvent) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EventType` param:
	err = encoder.Encode(obj.EventType)
	if err != nil {
		return err
	}
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `OwnerSlot` param:
	err = encoder.Encode(obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Serialize `Padding0` param:
	err = encoder.Encode(obj.Padding0)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `SeqNum` param:
	err = encoder.Encode(obj.SeqNum)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OutEvent) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EventType`:
	err = decoder.Decode(&obj.EventType)
	if err != nil {
		return err
	}
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSlot`:
	err = decoder.Decode(&obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Deserialize `Padding0`:
	err = decoder.Decode(&obj.Padding0)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `SeqNum`:
	err = decoder.Decode(&obj.SeqNum)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	return nil
}

type InnerNode struct {
	Tag     uint8
	Padding [3]uint8

	// number of highest `key` bits that all children share
	// e.g. if it's 2, the two highest bits of `key` will be the same on all children
	PrefixLen uint32

	// only the top `prefix_len` bits of `key` are relevant
	Key ag_binary.Uint128

	// indexes into `BookSide::nodes`
	Children [2]uint32

	// The earliest expiry timestamp for the left and right subtrees.
	//
	// Needed to be able to find and remove expired orders without having to
	// iterate through the whole bookside.
	ChildEarliestExpiry [2]uint64
	Reserved            [40]uint8
}

func (obj InnerNode) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tag` param:
	err = encoder.Encode(obj.Tag)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `PrefixLen` param:
	err = encoder.Encode(obj.PrefixLen)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Children` param:
	err = encoder.Encode(obj.Children)
	if err != nil {
		return err
	}
	// Serialize `ChildEarliestExpiry` param:
	err = encoder.Encode(obj.ChildEarliestExpiry)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *InnerNode) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tag`:
	err = decoder.Decode(&obj.Tag)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `PrefixLen`:
	err = decoder.Decode(&obj.PrefixLen)
	if err != nil {
		return err
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Children`:
	err = decoder.Decode(&obj.Children)
	if err != nil {
		return err
	}
	// Deserialize `ChildEarliestExpiry`:
	err = decoder.Decode(&obj.ChildEarliestExpiry)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type LeafNode struct {
	// NodeTag
	Tag uint8

	// Index into the owning OpenOrdersAccount's OpenOrders
	OwnerSlot uint8

	// Time in seconds after `timestamp` at which the order expires.
	// A value of 0 means no expiry.
	TimeInForce uint16
	Padding     [4]uint8

	// The binary tree key, see new_node_key()
	Key ag_binary.Uint128

	// Address of the owning OpenOrdersAccount
	Owner ag_solanago.PublicKey

	// Number of base lots to buy or sell, always >=1
	Quantity int64

	// The time the order was placed
	Timestamp uint64

	// If the effective price of an oracle pegged order exceeds this limit,
	// it will be considered invalid and may be removed.
	//
	// Only applicable in the oracle_pegged OrderTree
	PegLimit int64

	// User defined id for this order, used in FillEvents
	ClientOrderId uint64
}

func (obj LeafNode) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tag` param:
	err = encoder.Encode(obj.Tag)
	if err != nil {
		return err
	}
	// Serialize `OwnerSlot` param:
	err = encoder.Encode(obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Serialize `TimeInForce` param:
	err = encoder.Encode(obj.TimeInForce)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `Key` param:
	err = encoder.Encode(obj.Key)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Quantity` param:
	err = encoder.Encode(obj.Quantity)
	if err != nil {
		return err
	}
	// Serialize `Timestamp` param:
	err = encoder.Encode(obj.Timestamp)
	if err != nil {
		return err
	}
	// Serialize `PegLimit` param:
	err = encoder.Encode(obj.PegLimit)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *LeafNode) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tag`:
	err = decoder.Decode(&obj.Tag)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSlot`:
	err = decoder.Decode(&obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Deserialize `TimeInForce`:
	err = decoder.Decode(&obj.TimeInForce)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `Key`:
	err = decoder.Decode(&obj.Key)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Quantity`:
	err = decoder.Decode(&obj.Quantity)
	if err != nil {
		return err
	}
	// Deserialize `Timestamp`:
	err = decoder.Decode(&obj.Timestamp)
	if err != nil {
		return err
	}
	// Deserialize `PegLimit`:
	err = decoder.Decode(&obj.PegLimit)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

type AnyNode struct {
	Tag  uint8
	Data [87]uint8
}

func (obj AnyNode) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Tag` param:
	err = encoder.Encode(obj.Tag)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AnyNode) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Tag`:
	err = decoder.Decode(&obj.Tag)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	return nil
}

type OrderTreeRoot struct {
	MaybeNode uint32
	LeafCount uint32
}

func (obj OrderTreeRoot) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaybeNode` param:
	err = encoder.Encode(obj.MaybeNode)
	if err != nil {
		return err
	}
	// Serialize `LeafCount` param:
	err = encoder.Encode(obj.LeafCount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderTreeRoot) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaybeNode`:
	err = decoder.Decode(&obj.MaybeNode)
	if err != nil {
		return err
	}
	// Deserialize `LeafCount`:
	err = decoder.Decode(&obj.LeafCount)
	if err != nil {
		return err
	}
	return nil
}

type OrderTreeNodes struct {
	OrderTreeType uint8
	Padding       [3]uint8
	BumpIndex     uint32
	FreeListLen   uint32
	FreeListHead  uint32
	Reserved      [512]uint8
	Nodes         [1024]AnyNode
}

func (obj OrderTreeNodes) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `OrderTreeType` param:
	err = encoder.Encode(obj.OrderTreeType)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `BumpIndex` param:
	err = encoder.Encode(obj.BumpIndex)
	if err != nil {
		return err
	}
	// Serialize `FreeListLen` param:
	err = encoder.Encode(obj.FreeListLen)
	if err != nil {
		return err
	}
	// Serialize `FreeListHead` param:
	err = encoder.Encode(obj.FreeListHead)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	// Serialize `Nodes` param:
	err = encoder.Encode(obj.Nodes)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderTreeNodes) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `OrderTreeType`:
	err = decoder.Decode(&obj.OrderTreeType)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `BumpIndex`:
	err = decoder.Decode(&obj.BumpIndex)
	if err != nil {
		return err
	}
	// Deserialize `FreeListLen`:
	err = decoder.Decode(&obj.FreeListLen)
	if err != nil {
		return err
	}
	// Deserialize `FreeListHead`:
	err = decoder.Decode(&obj.FreeListHead)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	// Deserialize `Nodes`:
	err = decoder.Decode(&obj.Nodes)
	if err != nil {
		return err
	}
	return nil
}

type I80F48 struct {
	Val ag_binary.Int128
}

func (obj I80F48) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Val` param:
	err = encoder.Encode(obj.Val)
	if err != nil {
		return err
	}
	return nil
}

func (obj *I80F48) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Val`:
	err = decoder.Decode(&obj.Val)
	if err != nil {
		return err
	}
	return nil
}

type PlaceOrderArgs struct {
	Side                      Side
	PriceLots                 int64
	MaxBaseLots               int64
	MaxQuoteLotsIncludingFees int64
	ClientOrderId             uint64
	OrderType                 PlaceOrderType
	ExpiryTimestamp           uint64
	SelfTradeBehavior         SelfTradeBehavior
	Limit                     uint8
}

func (obj PlaceOrderArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseLots` param:
	err = encoder.Encode(obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteLotsIncludingFees` param:
	err = encoder.Encode(obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTimestamp` param:
	err = encoder.Encode(obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	// Serialize `SelfTradeBehavior` param:
	err = encoder.Encode(obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlaceOrderArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseLots`:
	err = decoder.Decode(&obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteLotsIncludingFees`:
	err = decoder.Decode(&obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTimestamp`:
	err = decoder.Decode(&obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `SelfTradeBehavior`:
	err = decoder.Decode(&obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

type PlaceMultipleOrdersArgs struct {
	PriceLots                 int64
	MaxQuoteLotsIncludingFees int64
	ExpiryTimestamp           uint64
}

func (obj PlaceMultipleOrdersArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteLotsIncludingFees` param:
	err = encoder.Encode(obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTimestamp` param:
	err = encoder.Encode(obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlaceMultipleOrdersArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteLotsIncludingFees`:
	err = decoder.Decode(&obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTimestamp`:
	err = decoder.Decode(&obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	return nil
}

type PlaceOrderPeggedArgs struct {
	Side                      Side
	PriceOffsetLots           int64
	PegLimit                  int64
	MaxBaseLots               int64
	MaxQuoteLotsIncludingFees int64
	ClientOrderId             uint64
	OrderType                 PlaceOrderType
	ExpiryTimestamp           uint64
	SelfTradeBehavior         SelfTradeBehavior
	Limit                     uint8
}

func (obj PlaceOrderPeggedArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceOffsetLots` param:
	err = encoder.Encode(obj.PriceOffsetLots)
	if err != nil {
		return err
	}
	// Serialize `PegLimit` param:
	err = encoder.Encode(obj.PegLimit)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseLots` param:
	err = encoder.Encode(obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteLotsIncludingFees` param:
	err = encoder.Encode(obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `ExpiryTimestamp` param:
	err = encoder.Encode(obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	// Serialize `SelfTradeBehavior` param:
	err = encoder.Encode(obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlaceOrderPeggedArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceOffsetLots`:
	err = decoder.Decode(&obj.PriceOffsetLots)
	if err != nil {
		return err
	}
	// Deserialize `PegLimit`:
	err = decoder.Decode(&obj.PegLimit)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseLots`:
	err = decoder.Decode(&obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteLotsIncludingFees`:
	err = decoder.Decode(&obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `ExpiryTimestamp`:
	err = decoder.Decode(&obj.ExpiryTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `SelfTradeBehavior`:
	err = decoder.Decode(&obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

type PlaceTakeOrderArgs struct {
	Side                      Side
	PriceLots                 int64
	MaxBaseLots               int64
	MaxQuoteLotsIncludingFees int64
	OrderType                 PlaceOrderType
	Limit                     uint8
}

func (obj PlaceTakeOrderArgs) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Side` param:
	err = encoder.Encode(obj.Side)
	if err != nil {
		return err
	}
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	// Serialize `MaxBaseLots` param:
	err = encoder.Encode(obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Serialize `MaxQuoteLotsIncludingFees` param:
	err = encoder.Encode(obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *PlaceTakeOrderArgs) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Side`:
	err = decoder.Decode(&obj.Side)
	if err != nil {
		return err
	}
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxBaseLots`:
	err = decoder.Decode(&obj.MaxBaseLots)
	if err != nil {
		return err
	}
	// Deserialize `MaxQuoteLotsIncludingFees`:
	err = decoder.Decode(&obj.MaxQuoteLotsIncludingFees)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

type OracleType ag_binary.BorshEnum

const (
	OracleTypePyth OracleType = iota
	OracleTypeStub
	OracleTypeSwitchboardV1
	OracleTypeSwitchboardV2
	OracleTypeRaydiumCLMM
)

func (value OracleType) String() string {
	switch value {
	case OracleTypePyth:
		return "Pyth"
	case OracleTypeStub:
		return "Stub"
	case OracleTypeSwitchboardV1:
		return "SwitchboardV1"
	case OracleTypeSwitchboardV2:
		return "SwitchboardV2"
	case OracleTypeRaydiumCLMM:
		return "RaydiumCLMM"
	default:
		return ""
	}
}

type OrderState ag_binary.BorshEnum

const (
	OrderStateValid OrderState = iota
	OrderStateInvalid
	OrderStateSkipped
)

func (value OrderState) String() string {
	switch value {
	case OrderStateValid:
		return "Valid"
	case OrderStateInvalid:
		return "Invalid"
	case OrderStateSkipped:
		return "Skipped"
	default:
		return ""
	}
}

type BookSideOrderTree ag_binary.BorshEnum

const (
	BookSideOrderTreeFixed BookSideOrderTree = iota
	BookSideOrderTreeOraclePegged
)

func (value BookSideOrderTree) String() string {
	switch value {
	case BookSideOrderTreeFixed:
		return "Fixed"
	case BookSideOrderTreeOraclePegged:
		return "OraclePegged"
	default:
		return ""
	}
}

type EventType ag_binary.BorshEnum

const (
	EventTypeFill EventType = iota
	EventTypeOut
)

func (value EventType) String() string {
	switch value {
	case EventTypeFill:
		return "Fill"
	case EventTypeOut:
		return "Out"
	default:
		return ""
	}
}

type NodeTag ag_binary.BorshEnum

const (
	NodeTagUninitialized NodeTag = iota
	NodeTagInnerNode
	NodeTagLeafNode
	NodeTagFreeNode
	NodeTagLastFreeNode
)

func (value NodeTag) String() string {
	switch value {
	case NodeTagUninitialized:
		return "Uninitialized"
	case NodeTagInnerNode:
		return "InnerNode"
	case NodeTagLeafNode:
		return "LeafNode"
	case NodeTagFreeNode:
		return "FreeNode"
	case NodeTagLastFreeNode:
		return "LastFreeNode"
	default:
		return ""
	}
}

type PlaceOrderType ag_binary.BorshEnum

const (
	PlaceOrderTypeLimit PlaceOrderType = iota
	PlaceOrderTypeImmediateOrCancel
	PlaceOrderTypePostOnly
	PlaceOrderTypeMarket
	PlaceOrderTypePostOnlySlide
	PlaceOrderTypeFillOrKill
)

func (value PlaceOrderType) String() string {
	switch value {
	case PlaceOrderTypeLimit:
		return "Limit"
	case PlaceOrderTypeImmediateOrCancel:
		return "ImmediateOrCancel"
	case PlaceOrderTypePostOnly:
		return "PostOnly"
	case PlaceOrderTypeMarket:
		return "Market"
	case PlaceOrderTypePostOnlySlide:
		return "PostOnlySlide"
	case PlaceOrderTypeFillOrKill:
		return "FillOrKill"
	default:
		return ""
	}
}

type PostOrderType ag_binary.BorshEnum

const (
	PostOrderTypeLimit PostOrderType = iota
	PostOrderTypePostOnly
	PostOrderTypePostOnlySlide
)

func (value PostOrderType) String() string {
	switch value {
	case PostOrderTypeLimit:
		return "Limit"
	case PostOrderTypePostOnly:
		return "PostOnly"
	case PostOrderTypePostOnlySlide:
		return "PostOnlySlide"
	default:
		return ""
	}
}

type SelfTradeBehavior ag_binary.BorshEnum

const (
	SelfTradeBehaviorDecrementTake SelfTradeBehavior = iota
	SelfTradeBehaviorCancelProvide
	SelfTradeBehaviorAbortTransaction
)

func (value SelfTradeBehavior) String() string {
	switch value {
	case SelfTradeBehaviorDecrementTake:
		return "DecrementTake"
	case SelfTradeBehaviorCancelProvide:
		return "CancelProvide"
	case SelfTradeBehaviorAbortTransaction:
		return "AbortTransaction"
	default:
		return ""
	}
}

type Side ag_binary.BorshEnum

const (
	SideBid Side = iota
	SideAsk
)

func (value Side) String() string {
	switch value {
	case SideBid:
		return "Bid"
	case SideAsk:
		return "Ask"
	default:
		return ""
	}
}

type SideAndOrderTree ag_binary.BorshEnum

const (
	SideAndOrderTreeBidFixed SideAndOrderTree = iota
	SideAndOrderTreeAskFixed
	SideAndOrderTreeBidOraclePegged
	SideAndOrderTreeAskOraclePegged
)

func (value SideAndOrderTree) String() string {
	switch value {
	case SideAndOrderTreeBidFixed:
		return "BidFixed"
	case SideAndOrderTreeAskFixed:
		return "AskFixed"
	case SideAndOrderTreeBidOraclePegged:
		return "BidOraclePegged"
	case SideAndOrderTreeAskOraclePegged:
		return "AskOraclePegged"
	default:
		return ""
	}
}

type OrderParams interface {
	isOrderParams()
}

type orderParamsContainer struct {
	Enum              ag_binary.BorshEnum `borsh_enum:"true"`
	Market            Market
	ImmediateOrCancel OrderParamsImmediateOrCancel
	Fixed             OrderParamsFixed
	OraclePegged      OrderParamsOraclePegged
	FillOrKill        OrderParamsFillOrKill
}

type Market uint8

func (obj Market) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}

func (obj *Market) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

func (_ *Market) isOrderParams() {}

type OrderParamsImmediateOrCancel struct {
	PriceLots int64
}

func (obj OrderParamsImmediateOrCancel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderParamsImmediateOrCancel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderParamsImmediateOrCancel) isOrderParams() {}

type OrderParamsFixed struct {
	PriceLots int64
	OrderType PostOrderType
}

func (obj OrderParamsFixed) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderParamsFixed) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderParamsFixed) isOrderParams() {}

type OrderParamsOraclePegged struct {
	PriceOffsetLots int64
	OrderType       PostOrderType
	PegLimit        int64
}

func (obj OrderParamsOraclePegged) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceOffsetLots` param:
	err = encoder.Encode(obj.PriceOffsetLots)
	if err != nil {
		return err
	}
	// Serialize `OrderType` param:
	err = encoder.Encode(obj.OrderType)
	if err != nil {
		return err
	}
	// Serialize `PegLimit` param:
	err = encoder.Encode(obj.PegLimit)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderParamsOraclePegged) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceOffsetLots`:
	err = decoder.Decode(&obj.PriceOffsetLots)
	if err != nil {
		return err
	}
	// Deserialize `OrderType`:
	err = decoder.Decode(&obj.OrderType)
	if err != nil {
		return err
	}
	// Deserialize `PegLimit`:
	err = decoder.Decode(&obj.PegLimit)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderParamsOraclePegged) isOrderParams() {}

type OrderParamsFillOrKill struct {
	PriceLots int64
}

func (obj OrderParamsFillOrKill) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PriceLots` param:
	err = encoder.Encode(obj.PriceLots)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderParamsFillOrKill) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PriceLots`:
	err = decoder.Decode(&obj.PriceLots)
	if err != nil {
		return err
	}
	return nil
}

func (_ *OrderParamsFillOrKill) isOrderParams() {}

type OrderTreeType ag_binary.BorshEnum

const (
	OrderTreeTypeBids OrderTreeType = iota
	OrderTreeTypeAsks
)

func (value OrderTreeType) String() string {
	switch value {
	case OrderTreeTypeBids:
		return "Bids"
	case OrderTreeTypeAsks:
		return "Asks"
	default:
		return ""
	}
}
